#
# Build Stage
#
FROM golang:1.11-alpine as builder

ARG VRDDT_COMMAND_PATH=""
ARG VRDDT_COMMAND=""
ARG VERSION_FLAG=""

ENV VRDDT_COMMAND_PATH=$VRDDT_COMMAND_PATH
ENV VRDDT_COMMAND=$VRDDT_COMMAND
ENV VERSION_FLAG=$VERSION_FLAG

WORKDIR $GOPATH/src/github.com/johnwyles/vrddt-droplets

COPY . ./

RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags "-extldflags \"-static\"" -ldflags -v -ldflags "$VERSION_FLAG" -o /vrddt-$VRDDT_COMMAND $VRDDT_COMMAND_PATH


#
# Final Stage
#
FROM jrottenberg/ffmpeg:4.1-alpine

ARG VRDDT_COMMAND=""
ARG VERSION_FLAG=""

ENV VRDDT_COMMAND=$VRDDT_COMMAND
ENV DOCKERIZE_VERSION v0.6.1
ENV VERSION_FLAG=$VERSION_FLAG

RUN apk add --no-cache openssl
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

RUN mkdir -p /app/config

COPY ./config/config.$VRDDT_COMMAND.toml /app/config/config.$VRDDT_COMMAND.toml
COPY ./config/ssl/server.crt /app/config
COPY ./config/ssl/server.key /app/config

COPY --from=builder /vrddt-$VRDDT_COMMAND /vrddt-$VRDDT_COMMAND
RUN chmod +x /app/vrddt-$VRDDT_COMMAND

ENTRYPOINT /app/vrddt-$VRDDT_COMMAND --config config.web.toml
